@charset "utf-8";
@use "sass:math";

/***********************************************************
* Generator
***********************************************************/

@mixin generate-with-responsive-classes {
  @content("");
  @include bp-l-or-lower { @content("l") }
  @include bp-m-or-lower { @content("m") }
  @include bp-s-or-lower { @content("s") }
  @include bp-higher-than-l { @content("l\\<\\*") }
  @include bp-higher-than-m { @content("m\\<\\*") }
  @include bp-higher-than-s { @content("s\\<\\*") }
}

@mixin generate-with-theme-classes {
  @content("");
  @if $enableSupportDarkMode {
    @media (prefers-color-scheme: dark) { @content("dark") }
  }
}

/***********************************************************
* Break point
***********************************************************/
@mixin bp-s-or-lower {
  @media screen and ( max-width: $break-point-s ) { @content }
}
@mixin bp-m-or-lower {
  @media screen and ( max-width: $break-point-m ) { @content }
}
@mixin bp-l-or-lower {
  @media screen and ( max-width: $break-point-l ) { @content }
}
@mixin bp-higher-than-s {
  @media screen and ( min-width: $break-point-s + 1 ) { @content }
}
@mixin bp-higher-than-m {
  @media screen and ( min-width: $break-point-m + 1 ) { @content }
}
@mixin bp-higher-than-l {
  @media screen and ( min-width: $break-point-l + 1 ) { @content }
}


/***********************************************************
* Theme
***********************************************************/
@mixin when-dark-mode {
  @if $enableSupportDarkMode {
    @media (prefers-color-scheme: dark) { @content }
  }
}

/***********************************************************
* Container query
***********************************************************/
@mixin container( $size ) {
  @container ( #{ $size } ) { @content }
}
@mixin container-less-than( $width ) {
  @container ( max-width: #{$width} ) { @content }
}
@mixin container-more-than( $width ) {
  @container ( max-width: #{$width} ) { @content }
}

/***********************************************************
* Block Module
***********************************************************/

/*----------------------------------------------------------
* All */

@mixin block-module-all {
  @include block-module-base;
  @include block-module-padding;
  @include block-module-margin;
  @include block-module-sticky;
}

/*----------------------------------------------------------
* Base */

@mixin block-module-base {
  display: block;
}

/*----------------------------------------------------------
* Padding */

@mixin block-module-padding {
  @include generate-with-responsive-classes using ($prefix) {
    // All
    @each $size, $width in $width-map {
      &.#{ class-name( "padding", $size, $prefix, true )} { padding: $width; }
    }

    // Axis
    @each $size, $width in $width-map {
      &.#{ class-name( "padding-v", $size, $prefix, true )} {
        padding-top: $width;
        padding-bottom: $width;
      }
      &.#{ class-name( "padding-h", $size, $prefix, true )} {
        padding-left: $width;
        padding-right: $width;
      }
    }

    // Direction
    @each $direction in $directions {
      $d: str-slice($direction,1,1);
      $propName: "padding-#{$d}";
      @each $size, $width in $width-map {
        &.#{ class-name( $propName, $size, $prefix, true )} {
          padding-#{$direction}:$width;
        }
      }
    }

    // Canceler
    &.#{ class-name( "padding",   "0", $prefix, true )} { padding: 0 }
    &.#{ class-name( "padding-v", "0", $prefix, true )} { padding-top: 0; padding-bottom: 0 }
    &.#{ class-name( "padding-h", "0", $prefix, true )} { padding-left: 0; padding-right: 0 }
    &.#{ class-name( "padding-t", "0", $prefix, true )} { padding-top: 0 }
    &.#{ class-name( "padding-l", "0", $prefix, true )} { padding-left: 0 }
    &.#{ class-name( "padding-r", "0", $prefix, true )} { padding-right: 0 }
    &.#{ class-name( "padding-b", "0", $prefix, true )} { padding-bottom: 0 }
  }
}

/*----------------------------------------------------------
* Margin */

@mixin block-module-margin {
  @include generate-with-responsive-classes using ($prefix) {

    // All
    @each $size, $width in $width-map {
      &.#{ class-name( "marigin", $size, $prefix, true )} { margin: $width }
      &.#{ class-name( "marigin", "-#{$size}", $prefix, true )} { margin: $width * -1 }
    }

    // Axis
    @each $size, $width in $width-map {

      &.#{ class-name( "margin-v", $size, $prefix, true )} {
        margin-top: $width;
        margin-bottom: $width;
      }
      &.#{ class-name( "margin-v", "-#{$size}", $prefix, true )} {
        margin-top: $width * -1;
        margin-bottom: $width * -1;
      }
      &.#{ class-name( "margin-h", $size, $prefix, true )} {
        margin-left: $width;
        margin-right: $width;
      }
      &.#{ class-name( "margin-h", "-#{$size}", $prefix, true )} {
        margin-left: $width * -1;
        margin-right: $width * -1;
      }
    }

    // Direction
    @each $direction in $directions {
      $d: str-slice($direction,1,1);
      $propName: "margin-#{$d}";
      @each $size, $width in $width-map {
        &.#{ class-name( $propName, $size, $prefix, true )} {
          margin-#{$direction}: $width;
        }
        &.#{ class-name( $propName, "-#{$size}", $prefix, true )} {
          margin-#{$direction}: $width * -1;
        }
      }
    }

    // Canceler
    &.#{ class-name( "margin",   "0", $prefix, true )} { margin: 0 }
    &.#{ class-name( "margin-v", "0", $prefix, true )} { margin-top: 0; margin-bottom: 0 }
    &.#{ class-name( "margin-h", "0", $prefix, true )} { margin-left: 0; margin-right: 0 }
    &.#{ class-name( "margin-t", "0", $prefix, true )} { margin-top: 0 }
    &.#{ class-name( "margin-l", "0", $prefix, true )} { margin-left: 0 }
    &.#{ class-name( "margin-r", "0", $prefix, true )} { margin-right: 0 }
    &.#{ class-name( "margin-b", "0", $prefix, true )} { margin-bottom: 0 }
  }
}

/*----------------------------------------------------------
* Sticky */

@mixin block-module-sticky {
  @include generate-with-responsive-classes using ($prefix) {
    &.#{class-name("sticky","",$prefix, true)} { position: relative }
  }
}

/***********************************************************
* Flex Module
***********************************************************/

/*----------------------------------------------------------
* All */

@mixin flex-module-all {
  @include flex-module-base;
  @include flex-module-axis;
  @include flex-module-gap;
  @include flex-module-justify;
  @include flex-module-align;
}

/*----------------------------------------------------------
* Base */

@mixin flex-module-base {
  display: flex;
  flex-direction: column;
  & > %flex-item { flex: 1 }
  & > %flex-item.\(fitContent\) {
    flex: 0 1 auto;
  }
}

/*----------------------------------------------------------
* Direction */

@mixin flex-module-axis {
  @include generate-with-responsive-classes using ($prefix) {
    &.#{class-name("axis","x",        $prefix, true)} { flex-direction: row }
    &.#{class-name("axis","reverse-x",$prefix, true)} { flex-direction: row-reverse }
    &.#{class-name("axis","y",        $prefix, true)} { flex-direction: column }
    &.#{class-name("axis","reverse-y",$prefix, true)} { flex-direction: column-reverse }
  }
}

/*----------------------------------------------------------
* Gap */

@mixin flex-module-gap {
  @include generate-with-responsive-classes using ($prefix) {
    @each $size, $width in $width-map {
      &.#{class-name("gap",$size,$prefix, true)} { gap: $width }
    }
    &.#{class-name("gap","0",$prefix, true)} { gap: 0 }
  }
}

/*----------------------------------------------------------
* JustifyContent */

@mixin flex-module-justify {
  @include generate-with-responsive-classes using ($prefix) {
    &.#{class-name("justify", "left",   $prefix, true)} { justify-content: flex-start }
    &.#{class-name("justify", "center", $prefix, true)} { justify-content: center }
    &.#{class-name("justify", "right",  $prefix, true)} { justify-content: flex-end }
    &.#{class-name("justify", "start",  $prefix, true)} { justify-content: flex-start }
    &.#{class-name("justify", "end",    $prefix, true)} { justify-content: flex-end }
  }
}

/*----------------------------------------------------------
* AlignItems */

@mixin flex-module-align {
  @include generate-with-responsive-classes using ($prefix) {
    &.#{class-name("align", "top",     $prefix, true)} { align-items: start }
    &.#{class-name("align", "center",  $prefix, true)} { align-items: center }
    &.#{class-name("align", "bottom",  $prefix, true)} { align-items: end }
    &.#{class-name("align", "stretch", $prefix, true)} { align-items: stretch }
    &.#{class-name("align", "start",   $prefix, true)} { align-items: start }
    &.#{class-name("align", "end",     $prefix, true)} { align-items: end }
  }
}

/***********************************************************
* Stick module
***********************************************************/

@mixin stick-module-all {
  position: absolute;
  @include stick-module-direction;
}

@mixin stick-module-direction {
  @include generate-with-responsive-classes using ($prefix) {

    &.#{class-name("vertical",   "", $prefix, true)} { top: 0; bottom: 0 }
    &.#{class-name("horizontal", "", $prefix, true)} { left: 0; right: 0 }

    @each $direction in $directions {
      &.#{class-name($direction, "", $prefix, true)} { #{$direction}: 0 }
    }

    &.#{class-name("parent", "", $prefix, true)} {
      top: 0; left: 0; right: 0; bottom: 0
    }

    $keys: "inset", "offset";
    @each $key in $keys {
      $n: 1;
      @if $key == "offset" { $n: -1 }

      @each $size, $width in $width-map {

        &.#{class-name("#{$key}-v", $size, $prefix, true)} {
          top: $width * $n;
          bottom: $width * $n;
        }
        &.#{class-name("#{$key}-h", $size, $prefix, true)} {
          left: $width * $n;
          right: $width * $n;
        }

        @each $direction in $directions {
          $d: str-slice($direction,1,1);
          $propName: "#{$key}-#{$d}";
          &.#{class-name( $propName, $size, $prefix, true)} {
            #{$direction}: $width * $n
          }
        }
        &.#{class-name("#{$key}-parent", $size, $prefix, true)} {
          top: $width * $n;
          left: $width * $n;
          right: $width * $n;
          bottom: $width * $n;
        }
      }
    }
  }
}

/***********************************************************
* width module
***********************************************************/
@mixin width( $size ) {
  min-width: $size;
  max-width: $size;
}

@mixin width-module( $name, $size ) {
  @include generate-with-responsive-classes using ($prefix) {
    .#{class-name("w", $name, $prefix)} {
      min-width: $size;
      max-width: $size;
    }
  }
}

@mixin width-classes( $unitClassName, $min: 1, $max: 10, $scale: 1 ) {
  @include generate-with-responsive-classes using ($prefix) {
    $unit: $unitClassName;
    @if( $unitClassName == "percent" or $unitClassName == "per" ) {
      $unit: "%";
    }
    @for $i from $min through $max {
      .#{class-name("w","#{$i*$scale}#{$unitClassName}", $prefix)} {
        @include width( unquote(($i * $scale) + $unit) );
      }
    }
  }
}

/***********************************************************
* height module
***********************************************************/
@mixin height( $size ) {
  min-height: $size;
  max-height: $size;
}

@mixin height-module( $name, $size ) {
  @include generate-with-responsive-classes using ($prefix) {
    .#{class-name("h", $name, $prefix)} {
      min-height: $size;
      max-height: $size;
    }
  }
}

@mixin height-classes( $unitClassName, $min: 1, $max: 10, $scale: 1 ) {
  @include generate-with-responsive-classes using ($prefix) {
    $unit: $unitClassName;
    @if( $unitClassName == "percent" or $unitClassName == "per" ) {
      $unit: "%";
    }
    @for $i from $min through $max {
      .#{class-name("h","#{$i*$scale}#{$unitClassName}", $prefix)} {
        @include height( unquote(($i * $scale) + $unit) );
      }
    }
  }
}

/***********************************************************
* Aspect module
***********************************************************/
@mixin aspect( $x, $y ) {
  aspect-ratio: math.div($x, $y);
}

/***********************************************************
* Background pattern and gradient
***********************************************************/
@mixin gradient( $deg, $colors... ) {
  $prop: "#{$deg},";
  $len: length($colors);
  @for $i from 1 through $len {
    $color: nth($colors,$i);
    $prop: $prop + "#{$color} #{math.div( 100%, ( $len - 1) ) * ($i - 1)},";
  }
  background-image: linear-gradient( unquote( str-slice( $prop, 0, -2 ) ) );
}

@mixin gradient-v( $colors... ) {
  @include gradient( 180deg, $colors... );
}

@mixin gradient-h( $colors... ) {
  @include gradient( 90deg, $colors... );
}

@mixin stripe( $deg, $interval, $color1, $color2 ) {
  background-image: repeating-linear-gradient( $deg, $color1 0, $color1 $interval, $color2 $interval, $color2 $interval * 2 );
}

@mixin stripe-v( $interval, $color1, $color2 ) {
  @include stripe(90deg, $interval, $color1, $color2 );
}

@mixin stripe-h( $interval, $color1, $color2 ) {
  @include stripe(180deg, $interval, $color1, $color2 );
}

@mixin mesh( $deg, $border-width, $space-width, $border-color, $space-color ) {
  background-color: $space-color;
  background-image:
    repeating-linear-gradient(
      $deg,
        transparent 0, transparent $space-width,
        $border-color $space-width, $border-color $space-width + $border-width,
    ),
    repeating-linear-gradient(
      $deg + 90,
        transparent 0, transparent $space-width,
        $border-color $space-width, $border-color $space-width + $border-width,
    );

}
/***********************************************************
* clamp classes
***********************************************************/
@mixin clamp-classes($min,$max) {
  @include generate-with-responsive-classes using ($prefix) {
    @for $line from $min through $max {
      .#{class-name("clamp","#{$line}", $prefix)} {
        display: -webkit-box;
        -webkit-line-clamp: $line;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
    }
  }
}

/***********************************************************
* Color-classes
***********************************************************/
@mixin color-classes( $name, $color, $prefix: "" ) {
  .#{class-name("color", $name, $prefix)} {
    color: $color;
  }
  .#{class-name("bg", $name, $prefix)} {
    background-color: $color;
  }
}

